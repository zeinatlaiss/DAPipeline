from sklearn.model_selection import train_test_split
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
import string
import numpy as np
import matplotlib.pyplot as plt
# import seaborn as sns
import os
from PyQt5.QtWidgets import *
import pandas as pd
from DAform_checkboxes_dropfromrows import Ui_Form_CheckBoxes
from DAform_table_addclasses import Ui_form_table_addclasses
from DApandaswidget import PandasModel
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Zeina\Documents\QT_Pandas\form_loaddataframe_tabs.ui'
#
# Created by: PyQt5 UI code generator 5.9.2
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_Form_loadDataframe_tabs(object):
    def setupUi(self, Form_loadDataframe_tabs):
        Form_loadDataframe_tabs.setObjectName("Form_loadDataframe_tabs")
        Form_loadDataframe_tabs.setEnabled(True)
        Form_loadDataframe_tabs.resize(1529, 1032)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Form_loadDataframe_tabs.sizePolicy().hasHeightForWidth())
        Form_loadDataframe_tabs.setSizePolicy(sizePolicy)
        Form_loadDataframe_tabs.setSizeIncrement(QtCore.QSize(25, 25))
        self.tabWidget_filestatistics = QtWidgets.QTabWidget(Form_loadDataframe_tabs)
        self.tabWidget_filestatistics.setGeometry(QtCore.QRect(20, 20, 1501, 1001))
        self.tabWidget_filestatistics.setTabPosition(QtWidgets.QTabWidget.North)
        self.tabWidget_filestatistics.setTabShape(QtWidgets.QTabWidget.Triangular)
        self.tabWidget_filestatistics.setIconSize(QtCore.QSize(50, 50))
        self.tabWidget_filestatistics.setMovable(True)
        self.tabWidget_filestatistics.setObjectName("tabWidget_filestatistics")
        self.tab_file = QtWidgets.QWidget()
        self.tab_file.setObjectName("tab_file")
        self.label_nbbatchid_file = QtWidgets.QLabel(self.tab_file)
        self.label_nbbatchid_file.setGeometry(QtCore.QRect(1350, 30, 141, 20))
        self.label_nbbatchid_file.setText("")
        self.label_nbbatchid_file.setObjectName("label_nbbatchid_file")
        self.lineEdit_well_file = QtWidgets.QLabel(self.tab_file)
        self.lineEdit_well_file.setGeometry(QtCore.QRect(1030, 30, 141, 20))
        self.lineEdit_well_file.setText("")
        self.lineEdit_well_file.setObjectName("lineEdit_well_file")
        self.lineEdit_plate_file = QtWidgets.QLabel(self.tab_file)
        self.lineEdit_plate_file.setGeometry(QtCore.QRect(870, 30, 141, 21))
        self.lineEdit_plate_file.setText("")
        self.lineEdit_plate_file.setObjectName("lineEdit_plate_file")
        self.label_nbcpdid_file = QtWidgets.QLabel(self.tab_file)
        self.label_nbcpdid_file.setGeometry(QtCore.QRect(1190, 30, 141, 20))
        self.label_nbcpdid_file.setText("")
        self.label_nbcpdid_file.setObjectName("label_nbcpdid_file")
        self.lineEdit_filepath = QtWidgets.QLineEdit(self.tab_file)
        self.lineEdit_filepath.setGeometry(QtCore.QRect(10, 30, 751, 21))
        self.lineEdit_filepath.setAutoFillBackground(False)
        self.lineEdit_filepath.setFrame(False)
        self.lineEdit_filepath.setObjectName("lineEdit_filepath")
        self.tabWidget_filestatistics.addTab(self.tab_file, "")
        self.tab_statistics = QtWidgets.QWidget()
        self.tab_statistics.setObjectName("tab_statistics")
        self.label_nbbatchid_stats = QtWidgets.QLabel(self.tab_statistics)
        self.label_nbbatchid_stats.setGeometry(QtCore.QRect(1040, 40, 131, 20))
        self.label_nbbatchid_stats.setText("")
        self.label_nbbatchid_stats.setObjectName("label_nbbatchid_stats")
        self.label_nbcpdid_stats = QtWidgets.QLabel(self.tab_statistics)
        self.label_nbcpdid_stats.setGeometry(QtCore.QRect(890, 40, 131, 20))
        self.label_nbcpdid_stats.setText("")
        self.label_nbcpdid_stats.setObjectName("label_nbcpdid_stats")
        self.comboBox_statistics = QtWidgets.QComboBox(self.tab_statistics)
        self.comboBox_statistics.setGeometry(QtCore.QRect(1220, 20, 271, 22))
        self.comboBox_statistics.setObjectName("comboBox_statistics")
        self.comboBox_statistics.addItem("")
        self.comboBox_statistics.addItem("")
        self.comboBox_statistics.addItem("")
        self.comboBox_statistics.addItem("")
        self.comboBox_statistics.addItem("")
        self.comboBox_statistics.addItem("")
        self.lineEdit_well_stats = QtWidgets.QLabel(self.tab_statistics)
        self.lineEdit_well_stats.setGeometry(QtCore.QRect(760, 40, 121, 20))
        self.lineEdit_well_stats.setText("")
        self.lineEdit_well_stats.setObjectName("lineEdit_well_stats")
        self.lineEdit_plate_stats = QtWidgets.QLabel(self.tab_statistics)
        self.lineEdit_plate_stats.setGeometry(QtCore.QRect(640, 40, 111, 21))
        self.lineEdit_plate_stats.setText("")
        self.lineEdit_plate_stats.setObjectName("lineEdit_plate_stats")
        self.comboBox_aggregate = QtWidgets.QComboBox(self.tab_statistics)
        self.comboBox_aggregate.setGeometry(QtCore.QRect(1220, 60, 271, 22))
        self.comboBox_aggregate.setObjectName("comboBox_aggregate")
        self.comboBox_aggregate.addItem("")
        self.comboBox_aggregate.addItem("")
        self.comboBox_aggregate.addItem("")
        self.tabWidget_filestatistics.addTab(self.tab_statistics, "")
        self.tab_edit = QtWidgets.QWidget()
        self.tab_edit.setObjectName("tab_edit")
        self.label_nbbatchid_edit = QtWidgets.QLabel(self.tab_edit)
        self.label_nbbatchid_edit.setGeometry(QtCore.QRect(1060, 40, 131, 20))
        self.label_nbbatchid_edit.setText("")
        self.label_nbbatchid_edit.setObjectName("label_nbbatchid_edit")
        self.comboBox_dropfrom = QtWidgets.QComboBox(self.tab_edit)
        self.comboBox_dropfrom.setGeometry(QtCore.QRect(1220, 40, 271, 22))
        self.comboBox_dropfrom.setObjectName("comboBox_dropfrom")
        self.comboBox_dropfrom.addItem("")
        self.comboBox_dropfrom.addItem("")
        self.comboBox_dropfrom.addItem("")
        self.comboBox_dropfrom.addItem("")
        self.comboBox_dropfrom.addItem("")
        self.comboBox_dropfrom.addItem("")
        self.comboBox_dropfrom.addItem("")
        self.comboBox_dropfrom.addItem("")
        self.label_nbcpdid_edit = QtWidgets.QLabel(self.tab_edit)
        self.label_nbcpdid_edit.setGeometry(QtCore.QRect(910, 40, 131, 20))
        self.label_nbcpdid_edit.setText("")
        self.label_nbcpdid_edit.setObjectName("label_nbcpdid_edit")
        self.label_nbrrows_edit = QtWidgets.QLabel(self.tab_edit)
        self.label_nbrrows_edit.setGeometry(QtCore.QRect(570, 60, 131, 21))
        self.label_nbrrows_edit.setText("")
        self.label_nbrrows_edit.setObjectName("label_nbrrows_edit")
        self.lineEdit_well_edit = QtWidgets.QLabel(self.tab_edit)
        self.lineEdit_well_edit.setGeometry(QtCore.QRect(780, 40, 121, 20))
        self.lineEdit_well_edit.setText("")
        self.lineEdit_well_edit.setObjectName("lineEdit_well_edit")
        self.lineEdit_plate_edit = QtWidgets.QLabel(self.tab_edit)
        self.lineEdit_plate_edit.setGeometry(QtCore.QRect(660, 40, 111, 21))
        self.lineEdit_plate_edit.setText("")
        self.lineEdit_plate_edit.setObjectName("lineEdit_plate_edit")
        self.tabWidget_filestatistics.addTab(self.tab_edit, "")
        self.tab_detectvalue = QtWidgets.QWidget()
        self.tab_detectvalue.setObjectName("tab_detectvalue")
        self.comboBox_duplicates = QtWidgets.QComboBox(self.tab_detectvalue)
        self.comboBox_duplicates.setGeometry(QtCore.QRect(1210, 50, 171, 22))
        self.comboBox_duplicates.setObjectName("comboBox_duplicates")
        self.comboBox_duplicates.addItem("")
        self.comboBox_duplicates.addItem("")
        self.comboBox_duplicates.addItem("")
        self.comboBox_duplicates.addItem("")
        self.comboBox_extracthits = QtWidgets.QComboBox(self.tab_detectvalue)
        self.comboBox_extracthits.setGeometry(QtCore.QRect(1210, 80, 271, 22))
        self.comboBox_extracthits.setObjectName("comboBox_extracthits")
        self.comboBox_extracthits.addItem("")
        self.comboBox_extracthits.addItem("")
        self.comboBox_extracthits.addItem("")
        self.comboBox_extracthits.addItem("")
        self.comboBox_extracthits.addItem("")
        self.comboBox_extracthits.addItem("")
        self.comboBox_extracthits.addItem("")
        self.comboBox_extracthits.addItem("")
        self.comboBox_removeoutliers = QtWidgets.QComboBox(self.tab_detectvalue)
        self.comboBox_removeoutliers.setGeometry(QtCore.QRect(1210, 20, 271, 22))
        self.comboBox_removeoutliers.setObjectName("comboBox_removeoutliers")
        self.comboBox_removeoutliers.addItem("")
        self.comboBox_removeoutliers.addItem("")
        self.comboBox_removeoutliers.addItem("")
        self.comboBox_removeoutliers.addItem("")
        self.comboBox_normalize = QtWidgets.QComboBox(self.tab_detectvalue)
        self.comboBox_normalize.setGeometry(QtCore.QRect(1390, 50, 91, 22))
        self.comboBox_normalize.setObjectName("comboBox_normalize")
        self.comboBox_normalize.addItem("")
        self.comboBox_normalize.addItem("")
        self.comboBox_normalize.addItem("")
        self.comboBox_normalize.addItem("")
        self.lineEdit_filepath_detectvalue = QtWidgets.QLineEdit(self.tab_detectvalue)
        self.lineEdit_filepath_detectvalue.setGeometry(QtCore.QRect(10, 20, 601, 21))
        self.lineEdit_filepath_detectvalue.setFrame(False)
        self.lineEdit_filepath_detectvalue.setObjectName("lineEdit_filepath_detectvalue")
        self.tabWidget_filestatistics.addTab(self.tab_detectvalue, "")
        self.tab_machinelearning = QtWidgets.QWidget()
        self.tab_machinelearning.setObjectName("tab_machinelearning")
        self.label_nbbatchid_machlearn = QtWidgets.QLabel(self.tab_machinelearning)
        self.label_nbbatchid_machlearn.setGeometry(QtCore.QRect(410, 70, 131, 20))
        self.label_nbbatchid_machlearn.setText("")
        self.label_nbbatchid_machlearn.setObjectName("label_nbbatchid_machlearn")
        self.label_nbcpdid_machlearn = QtWidgets.QLabel(self.tab_machinelearning)
        self.label_nbcpdid_machlearn.setGeometry(QtCore.QRect(260, 70, 131, 20))
        self.label_nbcpdid_machlearn.setText("")
        self.label_nbcpdid_machlearn.setObjectName("label_nbcpdid_machlearn")
        self.comboBox_machinelearning = QtWidgets.QComboBox(self.tab_machinelearning)
        self.comboBox_machinelearning.setGeometry(QtCore.QRect(1320, 20, 171, 22))
        self.comboBox_machinelearning.setObjectName("comboBox_machinelearning")
        self.comboBox_machinelearning.addItem("")
        self.comboBox_machinelearning.addItem("")
        self.lineEdit_well_machlearn = QtWidgets.QLabel(self.tab_machinelearning)
        self.lineEdit_well_machlearn.setGeometry(QtCore.QRect(130, 70, 121, 20))
        self.lineEdit_well_machlearn.setText("")
        self.lineEdit_well_machlearn.setObjectName("lineEdit_well_machlearn")
        self.lineEdit_plate_machlearn = QtWidgets.QLabel(self.tab_machinelearning)
        self.lineEdit_plate_machlearn.setGeometry(QtCore.QRect(10, 70, 111, 21))
        self.lineEdit_plate_machlearn.setText("")
        self.lineEdit_plate_machlearn.setObjectName("lineEdit_plate_machlearn")
        self.tabWidget_filestatistics.addTab(self.tab_machinelearning, "")
        self.tab_plot = QtWidgets.QWidget()
        self.tab_plot.setObjectName("tab_plot")
        self.comboBox_plot = QtWidgets.QComboBox(self.tab_plot)
        self.comboBox_plot.setGeometry(QtCore.QRect(1320, 20, 171, 22))
        self.comboBox_plot.setObjectName("comboBox_plot")
        self.comboBox_plot.addItem("")
        self.comboBox_plot.addItem("")
        self.comboBox_plot.addItem("")
        self.comboBox_plot.addItem("")
        self.comboBox_plot.addItem("")
        self.tabWidget_filestatistics.addTab(self.tab_plot, "")
        self.pushButton_loadfile = QtWidgets.QPushButton(Form_loadDataframe_tabs)
        self.pushButton_loadfile.setGeometry(QtCore.QRect(970, 960, 101, 21))
        self.pushButton_loadfile.setMouseTracking(False)
        self.pushButton_loadfile.setAutoFillBackground(False)
        self.pushButton_loadfile.setObjectName("pushButton_loadfile")
        self.pushButton_addclasses = QtWidgets.QPushButton(Form_loadDataframe_tabs)
        self.pushButton_addclasses.setGeometry(QtCore.QRect(1410, 960, 91, 21))
        self.pushButton_addclasses.setObjectName("pushButton_addclasses")
        self.pushButton_onlinkfiles = QtWidgets.QPushButton(Form_loadDataframe_tabs)
        self.pushButton_onlinkfiles.setGeometry(QtCore.QRect(1270, 960, 111, 21))
        self.pushButton_onlinkfiles.setObjectName("pushButton_onlinkfiles")
        self.pushButton_concatfiles = QtWidgets.QPushButton(Form_loadDataframe_tabs)
        self.pushButton_concatfiles.setGeometry(QtCore.QRect(1101, 960, 141, 21))
        self.pushButton_concatfiles.setObjectName("pushButton_concatfiles")
        self.tableView_dataframe = QtWidgets.QTableWidget(Form_loadDataframe_tabs)
        self.tableView_dataframe.setGeometry(QtCore.QRect(30, 200, 1471, 751))
        self.tableView_dataframe.setObjectName("tableView_dataframe")
        self.tableView_dataframe.setColumnCount(0)
        self.tableView_dataframe.setRowCount(0)

        self.pushButton_loadfile.clicked.connect(self.on_loadFile_clicked)
        self.pushButton_concatfiles.clicked.connect(self.on_concatenatefiles_clicked)


        self.retranslateUi(Form_loadDataframe_tabs)
        self.tabWidget_filestatistics.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Form_loadDataframe_tabs)

    def retranslateUi(self, Form_loadDataframe_tabs):
        _translate = QtCore.QCoreApplication.translate
        Form_loadDataframe_tabs.setWindowTitle(_translate("Form_loadDataframe_tabs", "DAPipeline"))
        self.tabWidget_filestatistics.setTabText(self.tabWidget_filestatistics.indexOf(self.tab_file), _translate("Form_loadDataframe_tabs", "File"))
        self.comboBox_statistics.setItemText(0, _translate("Form_loadDataframe_tabs", "Statistics"))
        self.comboBox_statistics.setItemText(1, _translate("Form_loadDataframe_tabs", "Z factor & Robust Z factor"))
        self.comboBox_statistics.setItemText(2, _translate("Form_loadDataframe_tabs", "Mean and STD"))
        self.comboBox_statistics.setItemText(3, _translate("Form_loadDataframe_tabs", "Intersection"))
        self.comboBox_statistics.setItemText(4, _translate("Form_loadDataframe_tabs", "Union"))
        self.comboBox_statistics.setItemText(5, _translate("Form_loadDataframe_tabs", "Merge 2 files"))
        self.comboBox_aggregate.setItemText(0, _translate("Form_loadDataframe_tabs", "Aggregate"))
        self.comboBox_aggregate.setItemText(1, _translate("Form_loadDataframe_tabs", "Aggregate - Min Max Mean Sum STD"))
        self.comboBox_aggregate.setItemText(2, _translate("Form_loadDataframe_tabs", "Aggregate grouping by"))
        self.tabWidget_filestatistics.setTabText(self.tabWidget_filestatistics.indexOf(self.tab_statistics), _translate("Form_loadDataframe_tabs", "Statistics"))
        self.comboBox_dropfrom.setItemText(0, _translate("Form_loadDataframe_tabs", "Edit rows columns"))
        self.comboBox_dropfrom.setItemText(1, _translate("Form_loadDataframe_tabs", "Merge 2 columns"))
        self.comboBox_dropfrom.setItemText(2, _translate("Form_loadDataframe_tabs", "Rename columns"))
        self.comboBox_dropfrom.setItemText(3, _translate("Form_loadDataframe_tabs", "Drop from columns"))
        self.comboBox_dropfrom.setItemText(4, _translate("Form_loadDataframe_tabs", "Order columns"))
        self.comboBox_dropfrom.setItemText(5, _translate("Form_loadDataframe_tabs", "Drop/ Rename/ Keep values in rows"))
        self.comboBox_dropfrom.setItemText(6, _translate("Form_loadDataframe_tabs", "Rename value in rows"))
        self.comboBox_dropfrom.setItemText(7, _translate("Form_loadDataframe_tabs", "Extract value from rows"))
        self.tabWidget_filestatistics.setTabText(self.tabWidget_filestatistics.indexOf(self.tab_edit), _translate("Form_loadDataframe_tabs", "Edit"))
        self.comboBox_duplicates.setItemText(0, _translate("Form_loadDataframe_tabs", "Duplicates"))
        self.comboBox_duplicates.setItemText(1, _translate("Form_loadDataframe_tabs", "Get duplicated values"))
        self.comboBox_duplicates.setItemText(2, _translate("Form_loadDataframe_tabs", "Number of duplicates"))
        self.comboBox_duplicates.setItemText(3, _translate("Form_loadDataframe_tabs", "Drop duplicated values"))
        self.comboBox_extracthits.setItemText(0, _translate("Form_loadDataframe_tabs", "Detect compounds"))
        self.comboBox_extracthits.setItemText(1, _translate("Form_loadDataframe_tabs", "> mean + value * sigma"))
        self.comboBox_extracthits.setItemText(2, _translate("Form_loadDataframe_tabs", "> mean - value * sigma"))
        self.comboBox_extracthits.setItemText(3, _translate("Form_loadDataframe_tabs", "< mean - value * sigma"))
        self.comboBox_extracthits.setItemText(4, _translate("Form_loadDataframe_tabs", "> mean"))
        self.comboBox_extracthits.setItemText(5, _translate("Form_loadDataframe_tabs", "< mean"))
        self.comboBox_extracthits.setItemText(6, _translate("Form_loadDataframe_tabs", "> value"))
        self.comboBox_extracthits.setItemText(7, _translate("Form_loadDataframe_tabs", "< value"))
        self.comboBox_removeoutliers.setItemText(0, _translate("Form_loadDataframe_tabs", "Remove outliers"))
        self.comboBox_removeoutliers.setItemText(1, _translate("Form_loadDataframe_tabs", "Mean-value*sigma <value< Mean+value*sigma"))
        self.comboBox_removeoutliers.setItemText(2, _translate("Form_loadDataframe_tabs", "> mean"))
        self.comboBox_removeoutliers.setItemText(3, _translate("Form_loadDataframe_tabs", "> value"))
        self.comboBox_normalize.setItemText(0, _translate("Form_loadDataframe_tabs", "Normalise"))
        self.comboBox_normalize.setItemText(1, _translate("Form_loadDataframe_tabs", "Median"))
        self.comboBox_normalize.setItemText(2, _translate("Form_loadDataframe_tabs", "Mean"))
        self.comboBox_normalize.setItemText(3, _translate("Form_loadDataframe_tabs", "Min-Max"))
        self.tabWidget_filestatistics.setTabText(self.tabWidget_filestatistics.indexOf(self.tab_detectvalue), _translate("Form_loadDataframe_tabs", "Detect values"))
        self.comboBox_machinelearning.setItemText(0, _translate("Form_loadDataframe_tabs", "Machine learning"))
        self.comboBox_machinelearning.setItemText(1, _translate("Form_loadDataframe_tabs", "LDA"))
        self.tabWidget_filestatistics.setTabText(self.tabWidget_filestatistics.indexOf(self.tab_machinelearning), _translate("Form_loadDataframe_tabs", "Machine Learning"))
        self.comboBox_plot.setItemText(0, _translate("Form_loadDataframe_tabs", "Plot"))
        self.comboBox_plot.setItemText(1, _translate("Form_loadDataframe_tabs", "Correlation"))
        self.comboBox_plot.setItemText(2, _translate("Form_loadDataframe_tabs", "Swarm plot with error bar"))
        self.comboBox_plot.setItemText(3, _translate("Form_loadDataframe_tabs", "Swarm plot without error bar"))
        self.comboBox_plot.setItemText(4, _translate("Form_loadDataframe_tabs", "Error bar"))
        self.tabWidget_filestatistics.setTabText(self.tabWidget_filestatistics.indexOf(self.tab_plot), _translate("Form_loadDataframe_tabs", "Plot"))
        self.pushButton_loadfile.setText(_translate("Form_loadDataframe_tabs", "Load File"))
        self.pushButton_addclasses.setText(_translate("Form_loadDataframe_tabs", "Add classes"))
        self.pushButton_onlinkfiles.setText(_translate("Form_loadDataframe_tabs", "Link 2 files"))
        self.pushButton_concatfiles.setText(_translate("Form_loadDataframe_tabs", "Concatenate Files"))



    def reloaddata_fromfilepath(self, file):
        df = pd.read_csv(file)
        model = PandasModel(df.head(500))
        self.tableView_dataframe.setModel(model)
        # if 'Plate' in df.columns:
            # if 'Well' not in df.columns:
                # self.lineEdit_plate.setText(str(df['Plate'].nunique()) + ' plates')
                # self.lineEdit_well.setText('No wells')
                # self.getncpdsbatches(df)
            # if 'Well' in df.columns:
            #     self.lineEdit_plate.setText(str(df['Plate'].nunique()) + ' plates')
            #     self.lineEdit_well.setText(str(len(df['Well'])) + ' wells')
            #     self.getncpdsbatches(df)
            # if 'WELL' in df.columns:
            #     self.lineEdit_plate.setText(str(df['Plate'].nunique()) + ' plates')
            #     self.lineEdit_well.setText(str(len(df['WELL'])) + ' WELLs')
            #     self.getncpdsbatches(df)

    def on_loadFile_clicked(self):
        fileName, _ = QFileDialog.getOpenFileName(None, "Open File",
                                                  "",
                                                  "CSV Files (*.csv)")
        if fileName:
            exists = os.path.isfile(fileName)
            if exists:
                # self.lineEdit_filepath.setText(fileName)
                df = pd.read_csv('D:\PYTHON CODE\Keras_Network_layers\\hit_smarca2vl1.csv', low_memory=False)
                model = PandasModel(df.head(1000))
                self.tableView_dataframe.setModel(model)

            #     if ('Plate' in df.columns and 'Well' in df.columns):
            #         self.lineEdit_plate.setText(str(df['Plate'].nunique()) + ' plates')
            #         self.lineEdit_well.setText(str(len(df['Well'])) + ' wells')
            #         self.getncpdsbatches(df)
            #
            #     if ('Plate' in df.columns and 'WELL' in df.columns):
            #         self.lineEdit_plate.setText(str(df['Plate'].nunique()) + ' plates')
            #         self.lineEdit_well.setText(str(len(df['WELL'])) + ' WELLs')
            #         self.getncpdsbatches(df)
            #
            #     if ('Plate' not in df.columns and 'Well' not in df.columns):
            #         self.lineEdit_plate.setText('No plate')
            #         self.lineEdit_well.setText('No wells')
            #         self.getncpdsbatches(df)
            #
            #     if ('Plate' not in df.columns and 'Well' in df.columns):
            #         self.lineEdit_plate.setText('No plate')
            #         self.lineEdit_well.setText(str(len(df['Well'])) + ' wells')
            #         self.getncpdsbatches(df)
            #
            #     if ('Plate' not in df.columns and 'WELL' in df.columns):
            #         self.lineEdit_plate.setText('No plate')
            #         self.lineEdit_well.setText(str(len(df['WELL'])) + ' WELLs')
            #         self.getncpdsbatches(df)
            #
            #     if ('Plate' in df.columns and 'Well' not in df.columns):
            #         self.lineEdit_plate.setText(str(df['Plate'].nunique()) + ' plates')
            #         self.lineEdit_well.setText('No wells')
            #         self.getncpdsbatches(df)
            # else:
            #     QMessageBox.information(None, "Error",
            #                             "The loaded file does not exist anymore.\n",
            #                             QMessageBox.Ok)

    def on_concatenatefiles_clicked(self):
        filter = "CSV (*.csv)"
        filename, _ = QFileDialog.getOpenFileNames(None, "Select CSV files to concatenate",
                                                   "",
                                                   filter)
        if filename:
            t1 = os.path.dirname(filename[0])
            file_name1 = os.path.splitext(os.path.basename(filename[0]))[0]
            list_files = []
            for i in filename:
                df = pd.read_csv(i)
                list_files.append(df)
                b = pd.DataFrame(pd.concat(list_files, axis=0))
                b.to_csv(t1 + '\\' + 'Concatenated_File.csv', index=None)
                self.reloaddata_fromfilepath(t1 + '\\'  + 'Concatenated_File.csv')
                self.lineEdit_filepath.setText(t1 + '/' + 'Concatenated_File.csv')


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form_loadDataframe_tabs = QtWidgets.QWidget()
    ui = Ui_Form_loadDataframe_tabs()
    ui.setupUi(Form_loadDataframe_tabs)
    Form_loadDataframe_tabs.show()
    sys.exit(app.exec_())

